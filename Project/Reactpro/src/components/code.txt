import React, { useState } from "react";

const InvoiceTable = () => {
  const [selectedRows, setSelectedRows] = useState([]);
  const [selectedFilter, setSelectedFilter] = useState("This Month");

  const invoices = [
    {
      id: 1,
      name: "Michael A. Miner",
      status: "Completed",
      amount: "$4,521",
      due: "$8,521",
      date: "2024-02-07",
      payment: "Mastercard",
      image: "https://via.placeholder.com/40",
    },
    {
      id: 2,
      name: "Theressa T. Bose",
      status: "Cancelled",
      amount: "$4,521",
      due: "$8,521",
      date: "2024-01-15",
      payment: "Mastercard",
      image: "https://via.placeholder.com/40",
    },
    {
      id: 3,
      name: "Theressa T. Bose",
      status: "Completed",
      amount: "$4,521",
      due: "$8,521",
      date: "2023-12-20",
      payment: "Mastercard",
      image: "https://via.placeholder.com/40",
    },
    {
      id: 4,
      name: "Michael A. Miner",
      status: "Cancelled",
      amount: "$4,521",
      due: "$8,521",
      date: "2023-11-10",
      payment: "Mastercard",
      image: "https://via.placeholder.com/40",
    },
    {
      id: 5,
      name: "Theressa T. Bose",
      status: "Completed",
      amount: "$4,521",
      due: "$8,521",
      date: "2023-11-25",
      payment: "Mastercard",
      image: "https://via.placeholder.com/40",
    },
    {
      id: 6,
      name: "Michael A. Miner",
      status: "Pending",
      amount: "$4,521",
      due: "$8,521",
      date: "2023-10-05",
      payment: "Mastercard",
      image: "https://via.placeholder.com/40",
    },
  ];

  // Handle row selection
  const toggleRowSelection = (id) => {
    setSelectedRows((prev) =>
      prev.includes(id) ? prev.filter((rowId) => rowId !== id) : [...prev, id]
    );
  };

  const isRowSelected = (id) => selectedRows.includes(id);

  // Status styling
  const getStatusClass = (status) => {
    switch (status) {
      case "Completed":
        return "bg-green-100 text-green-700 border-green-500";
      case "Cancelled":
        return "bg-red-100 text-red-700 border-red-500";
      case "Pending":
        return "bg-yellow-100 text-yellow-700 border-yellow-500";
      default:
        return "bg-gray-100 text-gray-700 border-gray-500";
    }
  };

  // Filter invoices based on selected time period
  const filterInvoices = () => {
    const today = new Date();
    const currentMonth = today.getMonth();
    const currentYear = today.getFullYear();

    return invoices.filter((invoice) => {
      const invoiceDate = new Date(invoice.date);
      const invoiceMonth = invoiceDate.getMonth();
      const invoiceYear = invoiceDate.getFullYear();

      if (selectedFilter === "This Month") {
        return invoiceMonth === currentMonth && invoiceYear === currentYear;
      } else if (selectedFilter === "Last Month") {
        return (
          invoiceMonth === (currentMonth === 0 ? 11 : currentMonth - 1) &&
          invoiceYear === (currentMonth === 0 ? currentYear - 1 : currentYear)
        );
      } else if (selectedFilter === "Last 3 Months") {
        const threeMonthsAgo = new Date();
        threeMonthsAgo.setMonth(threeMonthsAgo.getMonth() - 3);
        return invoiceDate >= threeMonthsAgo;
      }
      return true;
    });
  };

  return (
    <div className="p-6 bg-gray-100 min-h-screen">
      {/* Dashboard Stats */}
      <div className="grid grid-cols-4 gap-4 mb-6">
        <div className="bg-white p-4 rounded-lg shadow">
          <p className="text-gray-500">All Customers</p>
          <h3 className="text-xl font-semibold">+22.6K</h3>
        </div>
        <div className="bg-white p-4 rounded-lg shadow">
          <p className="text-gray-500">Orders</p>
          <h3 className="text-xl font-semibold">+4.5K</h3>
        </div>
        <div className="bg-white p-4 rounded-lg shadow">
          <p className="text-gray-500">Service Requests</p>
          <h3 className="text-xl font-semibold">+1.03K</h3>
        </div>
        <div className="bg-white p-4 rounded-lg shadow">
          <p className="text-gray-500">Invoice & Payment</p>
          <h3 className="text-xl font-semibold">$38,900.00</h3>
        </div>
      </div>

      {/* Filter Dropdown */}
      <div className="flex justify-between items-center mb-4">
        <h2 className="text-lg font-semibold">All Customers List</h2>
        <select
          value={selectedFilter}
          onChange={(e) => setSelectedFilter(e.target.value)}
          className="p-2 border rounded-md bg-white text-gray-700"
        >
          <option>This Month</option>
          <option>Last Month</option>
          <option>Last 3 Months</option>
        </select>
      </div>

      {/* Table */}
      <div className="bg-white p-6 rounded-lg shadow-lg">
        <table className="w-full border-collapse">
          <thead>
            <tr className="text-left bg-gray-100">
              <th className="p-3">
                <input type="checkbox" className="w-4 h-4" />
              </th>
              <th className="p-3">Customer</th>
              <th className="p-3">Invoice ID</th>
              <th className="p-3">Status</th>
              <th className="p-3">Total Amount</th>
              <th className="p-3">Amount Due</th>
              <th className="p-3">Due Date</th>
              <th className="p-3">Payment Method</th>
              <th className="p-3">Actions</th>
            </tr>
          </thead>
          <tbody>
            {filterInvoices().map((invoice) => (
              <tr key={invoice.id} className="border-b">
                <td className="p-3">
                  <input
                    type="checkbox"
                    checked={isRowSelected(invoice.id)}
                    onChange={() => toggleRowSelection(invoice.id)}
                    className="w-4 h-4"
                  />
                </td>
                <td className="p-3 flex items-center">
                  <img
                    src={invoice.image}
                    alt="profile"
                    className="w-10 h-10 rounded-full mr-3"
                  />
                  {invoice.name}
                </td>
                <td className="p-3 text-gray-700">#inv2054</td>
                <td className="p-3">
                  <span
                    className={`px-3 py-1 text-sm font-semibold border rounded-md ${getStatusClass(
                      invoice.status
                    )}`}
                  >
                    {invoice.status}
                  </span>
                </td>
                <td className="p-3">{invoice.amount}</td>
                <td className="p-3">{invoice.due}</td>
                <td className="p-3">{invoice.date}</td>
                <td className="p-3">{invoice.payment}</td>
                <td className="p-3 flex space-x-2">
                  <button className="text-gray-600 hover:text-gray-900">
                    üëÅÔ∏è
                  </button>
                  <button className="text-gray-600 hover:text-gray-900">
                    ‚úèÔ∏è
                  </button>
                  <button className="text-gray-600 hover:text-red-600">
                    üóëÔ∏è
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
};

export default InvoiceTable;
--------------------------------------------------
upated code for activityearnings



import React, { useState } from "react";
import { Bar } from "react-chartjs-2";
import DatePicker from "react-datepicker"; // ‚úÖ Import DatePicker
import "react-datepicker/dist/react-datepicker.css"; // ‚úÖ Import styles

import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  BarElement,
  Title,
  Tooltip,
  Legend,
} from "chart.js";

// Register Chart.js components
ChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);

const ActivityEarnings = () => {
  const [selectedDate, setSelectedDate] = useState(new Date()); // ‚úÖ Calendar state

  // Activity Data
  const activityData = {
    labels: ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"],
    datasets: [
      {
        label: "Hours Spent",
        data: [2.5, 3.8, 4.2, 5.1, 3.5, 4.7, 6.0],
        backgroundColor: "rgba(153, 102, 255, 0.6)",
        borderColor: "rgba(153, 102, 255, 1)",
        borderWidth: 1,
      },
    ],
  };

  // Earnings Data
  const earningsData = {
    labels: ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"],
    datasets: [
      {
        label: "Revenue ($)",
        data: [5000, 8000, 6500, 12000, 10000, 7000, 9000],
        backgroundColor: "rgba(54, 162, 235, 0.6)",
        borderColor: "rgba(54, 162, 235, 1)",
        borderWidth: 1,
      },
      {
        label: "Profit ($)",
        data: [2000, 4000, 3000, 7000, 6000, 3500, 5000],
        backgroundColor: "rgba(75, 192, 192, 0.6)",
        borderColor: "rgba(75, 192, 192, 1)",
        borderWidth: 1,
      },
    ],
  };

  // Chart options
  const options = {
    responsive: true,
    maintainAspectRatio: false,
    plugins: {
      legend: { position: "top" },
      title: { display: true },
    },
  };

  return (
    <div className="col-span-1 bg-secondary p-4 rounded-lg shadow">
      {/* Header Section with Calendar */}
      <div className="flex justify-between items-center">
        <h2 className="text-3xl font-semibold">Activity</h2>

        {/* ‚úÖ Date Picker */}
        <DatePicker
          selected={selectedDate}
          onChange={(date) => setSelectedDate(date)}
          className="bg-white border rounded-lg p-2 text-gray-700"
        />
      </div>

      <p className="text-3xl font-bold mt-6 flex">
        <span>24.9</span>
        <span className="flex flex-col items-start text-sm font-normal">
          <span>Hours</span>
          <span>spent</span>
        </span>
      </p>

      {/* Activity Graph */}
      <div className="mt-6 h-64">
        <Bar data={activityData} options={{ ...options, title: { text: "Weekly Activity (Hours Spent)" } }} />
      </div>

      {/* Earnings Section */}
      <h2 className="text-4xl font-semibold mt-12 flex items-center justify-between">
        <span>Earnings</span>
        <span className="text-4xl">...</span>
      </h2>

      <div className="flex justify-between">
        {[
          { label: "Revenue", color: "text-blue-600", amount: "$37,802" },
          { label: "Profit", color: "text-purple-600", amount: "$15,302" },
        ].map((item, index) => (
          <div key={index} className="flex items-center">
            <div className={`h-4 w-4 ${item.color} rounded-full mr-2`}></div>
            <div>
              <p className={`mt-8 text-3xl ${item.color}`}>{item.label}</p>
              <p className="font-bold text-xl">{item.amount}</p>
            </div>
          </div>
        ))}
      </div>

      {/* Earnings Graph */}
      <div className="mt-6 h-64">
        <Bar data={earningsData} options={{ ...options, title: { text: "Weekly Earnings Overview" } }} />
      </div>
    </div>
  );
};

export default ActivityEarnings;
